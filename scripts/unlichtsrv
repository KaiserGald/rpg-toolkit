#!/bin/bash

# Get directory unlichtsrv lives in
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# get configuration data
source $DIR/../data/conf/app.cfg
source $DIR/../data/conf/output.cfg

# usage message
usage () {
  printf "${PURPLE}unlichtsrv${NC} usage: ${PURPLE}unlichtsrv ${CYAN}COMMAND${WHITE}|${CYAN}OPTION${NC}\n"
  printf "\n${WHITE}COMMANDS${NC}\n"
  printf "\n\t${CYAN}build ${YELLOW}[${PURPLE}<${WHITE}TAG${PURPLE}>${YELLOW}]${NC}: builds the docker image of the server. If an ${WHITE}TAG${NC} is supplied it will set the tag for the image.\n"
  printf "\t${CYAN}run ${YELLOW}[${PURPLE}<${WHITE}TAG${PURPLE}>${YELLOW}] [${WHITE}OPTIONS${YELLOW}] [${WHITE}ARG${YELLOW}]${NC}: runs the latest docker image. If a ${WHITE}TAG${NC} is supplied, it will run that image instead.\n"
  printf "\t${CYAN}delete ${YELLOW}[${WHITE}TAG${YELLOW}]${NC}: removes the image specified by ${WHITE}TAG${NC}.\n"
  printf "\t${CYAN}clean${NC}: runs the docker prune command.\n"
  printf "\t${CYAN}help ${YELLOW}[${PURPLE}<${WHITE}COMMAND${PURPLE}>${YELLOW}]${NC}: prints this help usage message and quits. If a ${WHITE}COMMAND${NC} is supplied it will display a help message about the command.\n"
  printf "\n${WHITE}OPTIONS${NC}\n"
  printf "\n\t${CYAN}-b ${YELLOW}[${PURPLE}<${WHITE}TAG${PURPLE}>${YELLOW}]${NC}: same as the ${CYAN}build${WHITE} COMMAND${NC} above.\n"
  printf "\t${CYAN}-r ${YELLOW}[${PURPLE}<${WHITE}TAG${PURPLE}>${YELLOW}] [${WHITE}OPTIONS${CYAN}${YELLOW}] [${WHITE}ARG${YELLOW}]${NC}: same as the ${CYAN}run ${WHITE}COMMAND${NC} above.\n"
  printf "\t${CYAN}-d ${YELLOW}[${WHITE}TAG${YELLOW}]${NC}: same as the ${CYAN}delete${WHITE} COMMAND${NC} above.\n"
  printf "\t${CYAN}-c${NC}: same as the ${CYAN}clean${WHITE} COMMAND${NC} above.\n"
  printf "\t${CYAN}-h ${YELLOW}[${PURPLE}<${WHITE}COMMAND${PURPLE}>${YELLOW}]${NC}: same as the ${CYAN}help${WHITE} COMMAND${NC} above.\n\n"
}

# build will build a docker image of the app being worked on
build () {
  # if no arg build image using latest tag
  if [ $# == 0 ]; then
    sudo docker build -t $BINARY_NAME:latest . --build-arg app_name=$BINARY_NAME --build-arg src_path=/go/src/github.com/KaiserGald --build-arg install_path=$INSTALLPATH
    echo -e "Image ${PURPLE}$BINARY_NAME${NC}:${WHITE}latest${NC} built."
  # else use the tag
  else
    sudo docker build -t $BINARY_NAME:$1 . --build-arg app_name=$BINARY_NAME --build-arg src_path=/go/src/github.com/KaiserGald --build-arg install_path=$INSTALLPATH
    echo -e "Image ${PURPLE}$BINARY_NAME${NC}:${WHITE}$1${NC} built."
  fi
  exit 0
}

# run will stop the current container, freeing up the ports and then restart it using the supplied values.
# tag will run the supplied tag. env starts the image in the supplied environment and port will use that port
# to listen on
run () {
  # use default values unless supplied
  tag="latest"
  if [ -n "$1" ]; then
    tag=$1
  fi
  env="DEV"
  if [ -n "$2" ]; then
    env=$2
  fi
  port="8080"
  if [ -n "$3" ]; then
    port=$3
  fi
  # write env variables
  sudo printf "TAG=${tag}\nENV=${env}\nPORT=${port}\nDIR=${DIR}\n" | sudo tee /etc/.unlichtconf > /dev/null
  # if container is running stop it
  container=$( sudo docker ps -q --filter ancestor=${BINARY_NAME} )
  if [ -n "$container" ]; then
    sudo docker stop $container > /dev/null
  fi
  # start the container as a service
  sudo systemctl start $BINARY_NAME
  exit 0
}

# delete stops the container from running and then deletes the supplied image
delete () {
  container=$( sudo docker ps -q --filter ancestor=${BINARY_NAME}:$1 )
  if [ -n "$container" ]; then
    sudo docker stop $container > /dev/null
  fi
  sudo docker image rm -f $BINARY_NAME:$1
  printf "\n\n"
  sudo docker images
  exit 0
}

# clean is a weapper for docker system prune
clean () {
  sudo docker system prune -f
}

# process command line
if [ $# == 0 ]; then
  printf "No command supplied.\n" >&2
  usage
  exit 2
fi

command=$1

case ${command} in
  build|-b)
    shift
    build $1
    ;;
  run|-r)
    shift
    tag=$1
    shift
    declare env
    declare port
    while getopts :e:p: opt
    do
      case "${opt}"
      in
      e)
        env=$OPTARG
        ;;
      p)
        port=$OPTARG
        ;;
      \?)
        echo "Option was not a recognized option."
        usage
        exit 2
        ;;
      esac
    done
    run $tag $env $port
    ;;
  delete|-d)
    shift
    delete $1
    ;;
  clean|-c)
    shift
    clean
    ;;
  help|-h)
    shift
    usage >&2
    exit 0
    ;;
  *)
    echo "${command} is not a valid command."
    usage >&2
    exit 1
esac
